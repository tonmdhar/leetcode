/*class Solution {
    public int maximumScore(int[] nums, int[] multipliers) {
        int n = nums.length;
        int m = multipliers.length;
        int[] dp = new int[m + 1];
        for (int op = m - 1; op >= 0; op--) {
            int[] next_row = dp.clone();
            for (int left = op; left >= 0; left--) {
                dp[left] = Math.max(multipliers[op] * nums[left] + next_row[left + 1],
                                   multipliers[op] * nums[n - 1 - (op - left)] + next_row[left]);
            }
        }
        return dp[0];
    }
}*/

class Solution {
    int[][] arr;
    int n,m;
    public int maximumScore(int[] nums, int[] multipliers) {
        n = nums.length;
        m = multipliers.length;
        arr = new int[m][m];
        return dp(0,0,nums,multipliers);
    }
    public int dp(int l, int i, int[] nums, int[] multipliers) {
        if(i == m)
            return 0;
        if(arr[l][i] != 0)
            return arr[l][i];
        int left = dp(l+1,i+1,nums,multipliers) + nums[l] * multipliers[i];
        int right = dp(l,i+1,nums,multipliers) + nums[n-(i-l)-1] * multipliers[i];
        return arr[l][i] = Math.max(left,right);
    }
}

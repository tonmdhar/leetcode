// Approach 1
class Solution {
    public boolean isValidSudoku(char[][] board) {
        int[][] row = new int[9][10];
        int[][] col = new int[9][10];
        int[][] box = new int[9][10];
        for(int i = 0; i<9; i++) {
            for(int j = 0; j<9; j++) {
                if(board[i][j] == '.')
                    continue;
                int num = board[i][j] - '0';
                int boxIdx = ((i/3) * 3) + (j/3);
                if(row[i][num] != 0 || col[j][num] != 0 || box[boxIdx][num] != 0)
                    return false;
                row[i][num]++;
                col[j][num]++;
                box[boxIdx][num]++;
            }
        }
        return true;
    }
}

// Approach 2
class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashSet<String> set = new HashSet();
        for(int i = 0; i<9; i++) {
            for(int j = 0; j<9; j++) {
                char c = board[i][j];
                if(c != '.') {
                    if(!set.add(c + " found i " + i) || !set.add(c + " found j " + j) || !set.add(c + " found b " + i/3 + "-" + j/3))
                        return false;
                }
            }
        }
        return true;
    }
}
